@inject IViewLocalizer localizer

@{

    
    var currentCulture = System.Globalization.CultureInfo.CurrentCulture.Name;
}

<style>
    .required {
        border-left: 3px solid #dc3545;
        padding-left: 10px;
    }

    .required-file::after {
        content: " *";
        color: #dc3545;
    }

</style>
<div class="card p-4">
    <h5>@localizer["Attachments"] </h5>

    @if (Model != null && Model.Count>0)
    {
        <ul class="list-group mb-3">
            @foreach (var attachmentType in Model)
            {
                <li class="list-group-item @(attachmentType.IsMandatory ? "required" : "")">
                    <label>
                        @attachmentType.NameAr / @attachmentType.NameEn
                        @if (attachmentType.IsMandatory)
                        {
                            <span class="text-danger">*</span>
                        }
                       @*  <small class="text-muted">
                            (Max Size: @attachmentType.MaxSizeMB MB, Allowed: @attachmentType.AllowedExtensions)
                        </small> *@
                    </label>
                    <input type="file"
                           id="attachment-@attachmentType.Id"
                           class="form-control attachment-input @(attachmentType.IsMandatory ? "required-file" : "")"
                           data-attachment-id="@attachmentType.Id"
                           data-max-size="@attachmentType.MaxSizeMB"
                           data-allowed-extensions="@attachmentType.AllowedExtensions"
                           multiple />
                    <small class="text-muted mt-1 d-block">
                        (Max Size: @attachmentType.MaxSizeMB MB, Allowed: @attachmentType.AllowedExtensions)
                    </small>
                    <ul id="uploaded-files-@attachmentType.Id" class="mt-2 uploaded-files"></ul>
                </li>
            }
        </ul>
    }
    else
    {
        <p>@localizer["Noattachmentsrequired"] </p>
    }
</div>

<script>
    // const messages = {
    //     fileSizeExceeded: '@localizer["FileSizeExceeded", "{0}", "{1}"]'.replace("{0}", "{0}").replace("{1}", "{1}"),
    //     unsupportedExtension: '@localizer["UnsupportedExtension", "{0}", "{1}"]'.replace("{0}", "{0}").replace("{1}", "{1}"),
    //     uploadFailed: '@localizer["UploadFailed"]',
    //     successUploadMessage: '@localizer["SuccessUploadMessage"]'
    // };
    // Upload files
    $(".attachment-input").on("change", function () {
        const attachmentId = $(this).data("attachment-id");
        const maxSizeMB = $(this).data("max-size");
        const allowedExtensions = $(this).data("allowed-extensions").split(",");
        const files = $(this).prop("files");
        const formData = new FormData();

        const userId = "admin"; //"@ViewBag.UserId";
        const requestId = "a4cbe8f4-2b3e-4801-9703-93a6a3866e8f";//"@ViewBag.RequestId";

        // Add user and request IDs
        formData.append("userId", userId);
        formData.append("requestId", requestId);
        formData.append("attachmentTypeId", attachmentId);

        const errorMessages = [];

        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            const fileSizeMB = file.size / (1024 * 1024);
            const fileExtension = file.name.split('.').pop().toLowerCase();

            // Validate file size
            if (fileSizeMB > maxSizeMB) {
                errorMessages.push(`File "${file.name}" exceeds the maximum size of ${maxSizeMB} MB.`);
                continue;
            }

            // Validate file extension
            if (!allowedExtensions.includes(fileExtension)) {
                errorMessages.push(`File "${file.name}" has an unsupported extension. Allowed: ${allowedExtensions.join(", ")}.`);
                continue;
            }

            // Add the valid file to the form data
            formData.append("files", file);
        }

        if (errorMessages.length > 0) {
            showPopup("error", "Error", errorMessages.join("\n"));
            return;
        }

        // Upload files
        $.ajax({
            url: "/Request/UploadAttachments",
            type: "POST",
            data: formData,
            processData: false,
            contentType: false,
            success: function (response) {
                const uploadedList = $(`#uploaded-files-${attachmentId}`);
                response.forEach(file => {
                    uploadedList.append(`<li>${file.fileName}</li>`);
                });
                showPopup("success", "Success", "Files uploaded successfully!");
            },
            error: function (xhr) {
                showPopup("error", "Error", "Failed to upload files. Please try again.");
            }
        });
    });


</script>
