@using QassimPrincipality.Application.Dtos.Content
@model GetEServiceStepsDto
@inject IViewLocalizer localizer

@{
    
    ViewData["Title"] = @localizer["FillRequestForm"];/*  "" */
    var currentCulture = System.Globalization.CultureInfo.CurrentCulture.Name;
}

<div class="pc-service-steps-page">
    <div class="pc-breadcrumbs">
        <ul>
            <li>
                <a asp-controller="Home" asp-action="Index"> @localizer["HomePage"] </a>
            </li>
            <li>></li>
            <li>
                <a asp-controller="Services" asp-action="Index">  @localizer["Services"] </a>
            </li>
            <li>></li>
            <li class="pc-breadcrumbs-current">@(currentCulture == "ar-SA" ? Model.NameAr : Model.NameEn)</li>
        </ul>
    </div>

    <div class="pc-service-steps-container">
        
         @Html.Partial("_StepProgressBar", Model.ServiceSteps)
        

        <div class="pc-service-form pc-basic-container">
            <div class="pc-service-form-heading">
                <h3>@(currentCulture == "ar-SA" ? Model.NameAr : Model.NameEn)</h3>
                <p>@(currentCulture == "ar-SA" ? Model.DescriptionAr : Model.DescriptionEn)</p>

                <div class="pc-form-line"></div>

                <p class="pc-warning-text"> @localizer["RequiredInfo"] </p>
            </div>

            
            <div id="step-content">
                <div>Loading...</div>
               <!-- Safely set RequestId from ViewBag -->
                
            </div>
            <input type="hidden" id="requestId" value="@((ViewBag.RequestId ?? Guid.Empty).ToString())" />
            @* <button id="next-btn" class="btn btn-primary mt-4">Next</button> *@
            <button id="previous-btn" class="btn btn-secondary" style="display:none;">
                @localizer["Previous"]
            </button>
            <button id="next-btn" class="pc-primary-btn">
                @localizer["Next"]
            </button>
            <button id="submit-btn" class="btn btn-success mt-4" style="display:none;">@localizer["Submit"]</button>
            <div id="error-message" class="alert alert-danger mt-4" style="display:none;"></div>
            <div id="loading-indicator" style="display:none;">@localizer["Loading"]</div>
        </div>
    </div>
    @* <input type="hidden" id="total-steps-data" value='@Json.Serialize(Model.ServiceSteps)' /> *@
</div>

<

@section Scripts {
    <script>
        const messages = {
            errorTitle: '@localizer["Error"]',
            requiredFilesMessage: '@localizer["PleaseAttachRequiredFiles"]',
            detailsMessage: '@localizer["DetailsMessagePlease"]',
            requestSubmitted: '@localizer["RequestSubmittedSuccessfully"]',
            failedToLoadStep: '@localizer["FailedToLoadStep"]',
            failedToSaveStepData: '@localizer["FailedToSaveStepData"]',
            failedToSubmitRequest: '@localizer["FailedToSubmitRequest"]',
            pleaseSelectRelation: '@localizer["PleaseSelectRelation"]',
            failedToUploadFile: '@localizer["FailedToUploadFile"]',
            delegated: '@localizer["Delegated"]',
            fristClassRelative: '@localizer["FristClassRelative"]',
            lawyer: '@localizer["Lawyer"]',
            mySelf: '@localizer["MySelf"]',
            emailRequiredMessage: '@localizer["emailRequiredMessage"]',
            emailInvalidMessage: '@localizer["emailInvalidMessage"]',
            phoneRequiredMessage: '@localizer["phoneRequiredMessage"]',
            phoneInvalidMessage: '@localizer["phoneInvalidMessage"]',
            applicantDescriptionError: '@localizer["applicantDescriptionError"]',
            RequiredInputMessage: '@localizer["RequiredInputMessage"]',

            
            errorPhone:'@localizer["ErrorMessagePhone"]',
            errorEmail:'@localizer["ErrorMessageEmail"]'
        };


        const attachHeaders = {
            fileName: '@localizer["Filename"]',
            fileFormat: '@localizer["Fileformat"]',
            fileSize: '@localizer["Filesize"]',
            viewFile: '@localizer["Viewfile"]',
            view: '@localizer["View"]',
        };
       
            const inputLabelMap = {
            "customrequesterRelation": '@localizer["ServiceRequesterRelation"]',
            "customTypeOfSummons-summons": '@localizer["TypeOfSummons"]',
            "fullName": '@localizer["FullName"]',
            "nationality": '@localizer["Nationality"]',
            "birthDate": '@localizer["BirthDate"]',
            "idNumber": '@localizer["IDNumber"]',
            "phone": '@localizer["Phone"]',
            "email": '@localizer["Email"]',
            "city": '@localizer["City"]',
            "district": '@localizer["District"]',
            "requestDetails": '@localizer["RequestDetails"]'
        };
        const serviceId = "@Model.Id";  // Assuming this is available in the Razor view
        const HasApplicantStatus = "@Model.HasApplicantStatus"
        const storedServiceData = JSON.parse(localStorage.getItem(`serviceData_${serviceId}`)) || {};
        let currentStep = storedServiceData.currentStep || 1;
        let requestData = storedServiceData.requestData || {};
        let attachments = storedServiceData.attachments || [];
        const totalSteps = @Model.ServiceSteps.Count;

    </script>

    <script src="/lib/jquery-validation/dist/jquery.validate.js" ></script>
    <script src="/lib/jquery-validation/dist/additional-methods.js"> </script>
    <script src="/js/service-process.js"> </script>
 
}
