@using QassimPrincipality.Application.Dtos.Content
@model GetEServiceStepsDto
@inject IViewLocalizer localizer

@{
    
    ViewData["Title"] = @localizer["FillRequestForm"];/*  "" */
    var currentCulture = System.Globalization.CultureInfo.CurrentCulture.Name;
}

<div class="pc-service-steps-page">
    <div class="pc-breadcrumbs">
        <ul>
            <li>
                <a asp-controller="Home" asp-action="Index"> @localizer["HomePage"] </a>
            </li>
            <li>></li>
            <li>
                <a asp-controller="Services" asp-action="Index">  @localizer["Services"] </a>
            </li>
            <li>></li>
            <li class="pc-breadcrumbs-current">@(currentCulture == "ar-SA" ? Model.NameAr : Model.NameEn)</li>
        </ul>
    </div>

    <div class="pc-service-steps-container">
        
         @Html.Partial("_StepProgressBar", Model.ServiceSteps)
        

        <div class="pc-service-form pc-basic-container">
            <div class="pc-service-form-heading">
                <h3>@(currentCulture == "ar-SA" ? Model.NameAr : Model.NameEn)</h3>
                <p>@(currentCulture == "ar-SA" ? Model.DescriptionAr : Model.DescriptionEn)</p>

                <div class="pc-form-line"></div>

                <p class="pc-warning-text"> @localizer["RequiredInfo"] </p>
            </div>

            
            <div id="step-content">
                <div>Loading...</div>
               <!-- Safely set RequestId from ViewBag -->
                <input type="hidden" id="requestId" value="@((ViewBag.RequestId ?? Guid.Empty).ToString())" />
            </div>
            @* <button id="next-btn" class="btn btn-primary mt-4">Next</button> *@
            <button id="previous-btn" class="btn btn-secondary" style="display:none;">
                @localizer["Previous"]
            </button>
            <button id="next-btn" class="pc-primary-btn">
                @localizer["Next"]
            </button>
            <button id="submit-btn" class="btn btn-success mt-4" style="display:none;">@localizer["Submit"]</button>
            <div id="error-message" class="alert alert-danger mt-4" style="display:none;"></div>
            <div id="loading-indicator" style="display:none;">@localizer["Loading"]</div>
        </div>
    </div>
</div>

<

@section Scripts {
    <script src="/lib/jquery-validation/dist/jquery.validate.js" ></script>
    <script src="/lib/jquery-validation/dist/additional-methods.js"> </script>

    <script>

        let currentStep = parseInt(localStorage.getItem("currentStep")) || 1;
        const totalSteps = @Model.ServiceSteps.Count;
        const serviceId = @Model.Id;
    $(document).ready(function () {
        // Initial Setup
        //const serviceId = @Model.Id;
        // const totalSteps = @Model.ServiceSteps.Count;
        const emptyGuid = '00000000-0000-0000-0000-000000000000';
        //let currentStep = parseInt(localStorage.getItem("currentStep")) || 1;
        let requestData = JSON.parse(localStorage.getItem("requestData")) || {};
        let attachments = JSON.parse(localStorage.getItem("attachments")) || [];

        // Load the current step on page load
        localStorage.setItem("currentStep", currentStep);
        loadStep(serviceId, currentStep);
        updateStepper(currentStep);
        updateButtonVisibility();

        // Next Button Click Event
        $("#next-btn").click(function () {
            

                // Handle first step details validation
                if (currentStep === 1) {
                    const details = $("#requestDetails").val().trim();
                    if (details === "") {
                        showErrorMessage("#requestDetails", '@localizer["DetailsMessagePlease"]');
                        return;
                    }
                }

                // Validate required attachments
                if (!validateRequiredAttachments()) {
                    //alert('@localizer["PleaseAttachRequiredFiles"]');
                    showPopup("error", "Error", '@localizer["PleaseAttachRequiredFiles"]');
                    return;
                }

                // Save current step data
                saveCurrentStepData(currentStep);

                // Move to the next step
                currentStep++;
                localStorage.setItem("currentStep", currentStep);
                loadStep(serviceId, currentStep);
                updateStepper(currentStep);
                updateButtonVisibility();
        });
            $("#previous-btn").click(function () {
                if (currentStep > 1) {
                    currentStep--;
                    localStorage.setItem("currentStep", currentStep);
                    loadStep(serviceId, currentStep);
                    updateStepper(currentStep);
                    updateButtonVisibility();
                }
            });
        // Submit Button Click Event
        $("#submit-btn").click(function () {
            if ($("#step-form").valid()) {
                submitRequest();
            }
        });

        // Load Step Content via AJAX
        function loadStep(serviceId, stepNumber) {
            $("#loading-indicator").show();

            $.get(`/Request/LoadStep?serviceId=${serviceId}&stepNumber=${stepNumber}`)
                .done(function (data) {
                    $("#step-content").html(data);
                    $("#loading-indicator").hide();
                    initializeFormValidation();

                    // Restore saved data for the current step
                    const stepData = requestData[`Step${stepNumber}`];
                    if (stepData) {
                        for (const [key, value] of Object.entries(stepData)) {
                            $(`#${key}`).val(value);
                        }
                    }

                    // Handle file uploads if on the last step
                    if (stepNumber === totalSteps - 1) {
                        handleFileUploads();
                    }
                })
                .fail(function (xhr) {
                    showError('@localizer["FailedToLoadStep"]' + ' ' + xhr.responseText);
                });
        }

        // Initialize Form Validation
        function initializeFormValidation() {
            $("#step-form").validate({
                errorClass: "text-danger",
                errorElement: "div",
                highlight: function (element) {
                    $(element).closest(".form-group").addClass("has-error");
                },
                unhighlight: function (element) {
                    $(element).closest(".form-group").removeClass("has-error");
                }
            });
        }

        // Save Data for the Current Step
        function saveCurrentStepData(stepNumber) {
            const customHiddenInput = $("#customrequesterRelation");
            if (customHiddenInput.length) {
                const relationValue = customHiddenInput.val();
                if (!relationValue) {
                    alert('@localizer["PleaseSelectRelation"]');
                    return false;
                }
                console.log("Submitting Requester Relation:", relationValue);
            }

            const stepContent = $("#step-content").find("input, textarea, select");
            let stepData = {};

            stepContent.each(function () {
                const id = $(this).attr("id");
                const value = $(this).val();
                if (id) {
                    stepData[id] = value;
                }
            });

            // Store data locally
            requestData[`Step${stepNumber}`] = stepData;
            localStorage.setItem("requestData", JSON.stringify(requestData));
            console.log("Current Step Data:", requestData);

            // Save to server
            saveToServer(stepNumber, stepData);
        }

        // Save to Server
        function saveToServer(stepNumber, stepData) {
            const requestId = $("#requestId").val() || emptyGuid;
            
            $.post("/Request/SaveStepData", {
                requestId: requestId,
                serviceId: serviceId,
                stepNumber: stepNumber,
                stepData: JSON.stringify(stepData)
            }).fail(function (xhr) {
                showError('@localizer["FailedToSaveStepData"]' + ' ' + xhr.responseText);
            });
        }

        // Submit Full Request
        function submitRequest() {
            const requestDetails = JSON.stringify(requestData);
            const requestId = $("#requestId").val() || emptyGuid;

            $.post("/Request/SubmitRequest", {
                requestId: requestId,
                serviceId: serviceId,
                requestDetails: requestDetails,
                attachments: JSON.stringify(attachments)
            })
                .done(function (response) {
                    if (response.success) {
                        alert('@localizer["RequestSubmittedSuccessfully"]');
                        clearLocalStorage();
                        window.location.href = "/Request/Success";
                    } else {
                        showError('@localizer["FailedToSubmitRequest"]');
                    }
                })
                .fail(function (xhr) {
                    showError('@localizer["FailedToSubmitRequest"]' + ' ' + xhr.responseText);
                });
        }

        // Handle File Uploads
        function handleFileUploads() {
            $("#attachments").on("change", function () {
                const files = $(this).prop("files");
                const formData = new FormData();

                for (let i = 0; i < files.length; i++) {
                    formData.append("file", files[i]);
                }

                $.ajax({
                    url: "/Request/UploadAttachment",
                    type: "POST",
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        attachments.push(response.fileName);
                        localStorage.setItem("attachments", JSON.stringify(attachments));
                        $("#uploaded-files").append(`<li>${response.fileName}</li>`);
                        console.log("Attachments:", attachments);
                    },
                    error: function (xhr) {
                        showError('@localizer["FailedToUploadFile"]' + ' ' + xhr.responseText);
                    }
                });
            });
        }

        // Show Error Messages
        function showError(message) {
            $("#error-message").text(message).show();
        }

        // Show Inline Error Message
        function showErrorMessage(selector, message) {
                $(selector).next(".error").text(message).show();
        }

        // Hide Inline Error Message
        function hideErrorMessage(selector) {
            $(selector).next(".error").hide();
        }

        // Clear Local Storage on Completion
        function clearLocalStorage() {
            localStorage.removeItem("currentStep");
            localStorage.removeItem("requestData");
            localStorage.removeItem("attachments");
        }
         function updateStepper(currentStep) {
                debugger;
                // Remove active class from all steps
                $(".pc-step").removeClass("active");

                // Add active class to the current step and all previous steps
                $(".pc-step").each(function () {
                   
                    const stepNumber = parseInt($(this).find(".pc-step-circle").text().trim());
                    if (stepNumber <= currentStep) {
                        $(this).addClass("active");
                    }
                });
            }
            // Validate Required Attachments
            function validateRequiredAttachments() {
                let allAttachmentsValid = true;

                $(".attachment-input.required-file").each(function () {
                    const attachmentId = $(this).data("attachment-id");
                    const uploadedFiles = $(`#uploaded-files-${attachmentId} li`);

                    if (uploadedFiles.length === 0) {
                        allAttachmentsValid = false;
                    }
                });

                return allAttachmentsValid;
            }
            // Update Button Visibility
            function updateButtonVisibility() {
                if (currentStep === 1) {
                    $("#previous-btn").hide();
                    $("#next-btn").show();
                    $("#submit-btn").hide();
                } else if (currentStep === totalSteps) {
                    $("#previous-btn").show();
                    $("#next-btn").hide();
                    $("#submit-btn").show();
                } else {
                    $("#previous-btn").show();
                    $("#next-btn").show();
                    $("#submit-btn").hide();
                }
            }

    });
</script>



}
